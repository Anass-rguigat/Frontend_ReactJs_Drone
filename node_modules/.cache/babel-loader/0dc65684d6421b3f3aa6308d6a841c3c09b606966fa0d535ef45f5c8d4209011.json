{"ast":null,"code":"import React, { useState, useEffect, useMemo, Suspense, useContext, useCallback, useRef } from 'react';\nimport { getTranslateProps, getFallback, getFallbackArray } from '@tolgee/web';\nexport * from '@tolgee/web';\nfunction getTolgeeWithDeactivatedWrapper(tolgee) {\n  return Object.assign(Object.assign({}, tolgee), {\n    t(...args) {\n      // @ts-ignore\n      const props = getTranslateProps(...args);\n      return tolgee.t(Object.assign(Object.assign({}, props), {\n        noWrap: true\n      }));\n    }\n  });\n}\n/**\n * Updates tolgee static data and language, to be ready right away for the first render\n * and therefore compatible with SSR.\n *\n * It also ensures that the first render is done without wrapping and so it avoids\n * \"client different than server\" issues.\n * *\n * @param tolgeeInstance initialized Tolgee instance\n * @param language language that is obtained outside of Tolgee on the server and client\n * @param staticData static data for the language\n * @param enabled if set to false, no action is taken\n */\nfunction useTolgeeSSR(tolgeeInstance, language, data, enabled = true) {\n  const [noWrappingTolgee] = useState(() => getTolgeeWithDeactivatedWrapper(tolgeeInstance));\n  const [initialRender, setInitialRender] = useState(enabled);\n  useEffect(() => {\n    setInitialRender(false);\n  }, []);\n  useMemo(() => {\n    if (enabled) {\n      // we have to prepare tolgee before rendering children\n      // so translations are available right away\n      // events emitting must be off, to not trigger re-render while rendering\n      tolgeeInstance.setEmitterActive(false);\n      tolgeeInstance.addStaticData(data);\n      tolgeeInstance.changeLanguage(language);\n      tolgeeInstance.setEmitterActive(true);\n    }\n  }, [language, data, tolgeeInstance]);\n  useState(() => {\n    // running this function only on first render\n    if (!tolgeeInstance.isLoaded() && enabled) {\n      // warning user, that static data provided are not sufficient\n      // for proper SSR render\n      const requiredRecords = tolgeeInstance.getRequiredDescriptors(language);\n      const providedRecords = tolgeeInstance.getAllRecords();\n      const missingRecords = requiredRecords.map(({\n        namespace,\n        language\n      }) => namespace ? `${namespace}:${language}` : language).filter(key => !providedRecords.find(r => (r === null || r === void 0 ? void 0 : r.cacheKey) === key));\n      // eslint-disable-next-line no-console\n      console.warn(`Tolgee: Missing records in \"staticData\" for proper SSR functionality: ${missingRecords.map(key => `\"${key}\"`).join(', ')}`);\n    }\n  });\n  return initialRender ? noWrappingTolgee : tolgeeInstance;\n}\nconst DEFAULT_REACT_OPTIONS = {\n  useSuspense: false\n};\nlet ProviderInstance;\nconst getProviderInstance = () => {\n  if (!ProviderInstance) {\n    ProviderInstance = React.createContext(undefined);\n  }\n  return ProviderInstance;\n};\nlet LAST_TOLGEE_INSTANCE = undefined;\nconst TolgeeProvider = ({\n  tolgee,\n  options,\n  children,\n  fallback,\n  ssr\n}) => {\n  // prevent restarting tolgee unnecesarly\n  // however if the instance change on hot-reloading\n  // we want to restart\n  useEffect(() => {\n    if ((LAST_TOLGEE_INSTANCE === null || LAST_TOLGEE_INSTANCE === void 0 ? void 0 : LAST_TOLGEE_INSTANCE.run) !== tolgee.run) {\n      if (LAST_TOLGEE_INSTANCE) {\n        LAST_TOLGEE_INSTANCE.stop();\n      }\n      LAST_TOLGEE_INSTANCE = tolgee;\n      tolgee.run().catch(e => {\n        // eslint-disable-next-line no-console\n        console.error(e);\n      }).finally(() => {\n        setLoading(false);\n      });\n    }\n  }, [tolgee]);\n  let tolgeeSSR = tolgee;\n  const {\n    language,\n    staticData\n  } = typeof ssr !== 'object' ? {} : ssr;\n  tolgeeSSR = useTolgeeSSR(tolgee, language, staticData, Boolean(ssr));\n  const [loading, setLoading] = useState(!tolgeeSSR.isLoaded());\n  const optionsWithDefault = Object.assign(Object.assign({}, DEFAULT_REACT_OPTIONS), options);\n  const TolgeeProviderContext = getProviderInstance();\n  if (optionsWithDefault.useSuspense) {\n    return React.createElement(TolgeeProviderContext.Provider, {\n      value: {\n        tolgee: tolgeeSSR,\n        options: optionsWithDefault\n      }\n    }, loading ? fallback : React.createElement(Suspense, {\n      fallback: fallback || null\n    }, children));\n  }\n  return React.createElement(TolgeeProviderContext.Provider, {\n    value: {\n      tolgee: tolgeeSSR,\n      options: optionsWithDefault\n    }\n  }, loading ? fallback : children);\n};\nlet globalContext;\nconst GlobalContextPlugin = options => tolgee => {\n  globalContext = {\n    tolgee,\n    options: Object.assign(Object.assign({}, DEFAULT_REACT_OPTIONS), options)\n  };\n  return tolgee;\n};\nfunction getGlobalContext() {\n  return globalContext;\n}\nconst useTolgeeContext = () => {\n  const TolgeeProviderContext = getProviderInstance();\n  const context = useContext(TolgeeProviderContext) || getGlobalContext();\n  if (!context) {\n    throw new Error(\"Couldn't find tolgee instance, did you forgot to use `TolgeeProvider`?\");\n  }\n  return context;\n};\nconst useRerender = () => {\n  const [instance, setCounter] = useState(0);\n  const rerender = useCallback(() => {\n    setCounter(num => num + 1);\n  }, [setCounter]);\n  return {\n    instance,\n    rerender\n  };\n};\nconst useTranslateInternal = (ns, options) => {\n  const {\n    tolgee,\n    options: defaultOptions\n  } = useTolgeeContext();\n  const namespaces = getFallback(ns);\n  const namespacesJoined = getFallbackArray(namespaces).join(':');\n  const currentOptions = Object.assign(Object.assign({}, defaultOptions), options);\n  // dummy state to enable re-rendering\n  const {\n    rerender,\n    instance\n  } = useRerender();\n  const subscriptionQueue = useRef([]);\n  subscriptionQueue.current = [];\n  const isLoaded = tolgee.isLoaded(namespaces);\n  useEffect(() => {\n    const subscription = tolgee.on('update', rerender);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [namespacesJoined, tolgee]);\n  useEffect(() => {\n    tolgee.addActiveNs(namespaces);\n    return () => tolgee.removeActiveNs(namespaces);\n  }, [namespacesJoined, tolgee]);\n  const t = useCallback(props => {\n    var _a;\n    const fallbackNs = (_a = props.ns) !== null && _a !== void 0 ? _a : namespaces === null || namespaces === void 0 ? void 0 : namespaces[0];\n    return tolgee.t(Object.assign(Object.assign({}, props), {\n      ns: fallbackNs\n    }));\n  }, [tolgee, instance]);\n  if (currentOptions.useSuspense && !isLoaded) {\n    throw tolgee.addActiveNs(namespaces, true);\n  }\n  return {\n    t,\n    isLoading: !isLoaded\n  };\n};\nconst useTranslate = (ns, options) => {\n  const {\n    t: tInternal,\n    isLoading\n  } = useTranslateInternal(ns, options);\n  const t = useCallback((...params) => {\n    // @ts-ignore\n    const props = getTranslateProps(...params);\n    return tInternal(props);\n  }, [tInternal]);\n  return {\n    t,\n    isLoading\n  };\n};\nfunction unwrapSingleElementArray(value) {\n  if (Array.isArray(value) && value.length === 1) {\n    return value[0];\n  } else {\n    return value;\n  }\n}\nconst wrapTagHandlers = params => {\n  if (!params) {\n    return undefined;\n  }\n  const result = {};\n  Object.entries(params || {}).forEach(([key, value]) => {\n    if (typeof value === 'function') {\n      result[key] = chunk => {\n        return value(addReactKeys(chunk));\n      };\n    } else if (React.isValidElement(value)) {\n      const el = value;\n      result[key] = chunk => {\n        return el.props.children === undefined && (chunk === null || chunk === void 0 ? void 0 : chunk.length) ? React.cloneElement(el, {}, addReactKeys(chunk)) : React.cloneElement(el);\n      };\n    } else {\n      result[key] = value;\n    }\n  });\n  return result;\n};\nconst addReactKeys = children => {\n  const val = unwrapSingleElementArray(children);\n  if (Array.isArray(val)) {\n    return val.map((item, i) => React.createElement(React.Fragment, {\n      key: i\n    }, item));\n  } else {\n    return val;\n  }\n};\nconst TBase = props => {\n  const key = props.keyName || props.children;\n  if (key === undefined) {\n    // eslint-disable-next-line no-console\n    console.error('T component: keyName not defined');\n  }\n  const defaultValue = props.defaultValue || (props.keyName ? props.children : undefined);\n  const translation = addReactKeys(props.t({\n    key: key,\n    params: wrapTagHandlers(props.params),\n    defaultValue,\n    noWrap: props.noWrap,\n    ns: props.ns,\n    language: props.language\n  }));\n  return React.createElement(React.Fragment, null, translation);\n};\nconst T = props => {\n  const {\n    t\n  } = useTranslateInternal();\n  return React.createElement(TBase, Object.assign({\n    t: t\n  }, props));\n};\nconst useTolgee = events => {\n  const {\n    tolgee\n  } = useTolgeeContext();\n  const {\n    rerender\n  } = useRerender();\n  useEffect(() => {\n    const listeners = events === null || events === void 0 ? void 0 : events.map(e => tolgee.on(e, rerender));\n    return () => {\n      listeners === null || listeners === void 0 ? void 0 : listeners.forEach(listener => listener.unsubscribe());\n    };\n  }, [events === null || events === void 0 ? void 0 : events.join(':')]);\n  return tolgee;\n};\nexport { GlobalContextPlugin, T, TBase, TolgeeProvider, getProviderInstance, useTolgee, useTolgeeSSR, useTranslate };","map":{"version":3,"names":["getTolgeeWithDeactivatedWrapper","tolgee","Object","assign","t","args","props","getTranslateProps","noWrap","useTolgeeSSR","tolgeeInstance","language","data","enabled","noWrappingTolgee","useState","initialRender","setInitialRender","useEffect","useMemo","setEmitterActive","addStaticData","changeLanguage","isLoaded","requiredRecords","getRequiredDescriptors","providedRecords","getAllRecords","missingRecords","map","namespace","filter","key","find","r","cacheKey","console","warn","join","DEFAULT_REACT_OPTIONS","useSuspense","ProviderInstance","getProviderInstance","React","createContext","undefined","LAST_TOLGEE_INSTANCE","TolgeeProvider","options","children","fallback","ssr","run","stop","catch","e","error","finally","setLoading","tolgeeSSR","staticData","Boolean","loading","optionsWithDefault","TolgeeProviderContext","createElement","Provider","value","Suspense","globalContext","GlobalContextPlugin","getGlobalContext","useTolgeeContext","context","useContext","Error","useRerender","instance","setCounter","rerender","useCallback","num","useTranslateInternal","ns","defaultOptions","namespaces","getFallback","namespacesJoined","getFallbackArray","currentOptions","subscriptionQueue","useRef","current","subscription","on","unsubscribe","addActiveNs","removeActiveNs","fallbackNs","_a","isLoading","useTranslate","tInternal","params","unwrapSingleElementArray","Array","isArray","length","wrapTagHandlers","result","entries","forEach","chunk","addReactKeys","isValidElement","el","cloneElement","val","item","i","Fragment","TBase","keyName","defaultValue","translation","T","useTolgee","events","listeners","listener"],"sources":["C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\useTolgeeSSR.ts","C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\TolgeeProvider.tsx","C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\GlobalContextPlugin.tsx","C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\useTolgeeContext.ts","C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\hooks.ts","C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\useTranslateInternal.ts","C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\useTranslate.ts","C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\tagsTools.tsx","C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\TBase.tsx","C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\T.tsx","C:\\Users\\rguig\\OneDrive\\Desktop\\dev\\projet\\Frontend_ReactJs_Drone\\node_modules\\@tolgee\\react\\src\\useTolgee.ts"],"sourcesContent":["import {\n  CachePublicRecord,\n  getTranslateProps,\n  TolgeeInstance,\n  TolgeeStaticData,\n} from '@tolgee/web';\nimport { useEffect, useMemo, useState } from 'react';\n\nfunction getTolgeeWithDeactivatedWrapper(\n  tolgee: TolgeeInstance\n): TolgeeInstance {\n  return {\n    ...tolgee,\n    t(...args) {\n      // @ts-ignore\n      const props = getTranslateProps(...args);\n      return tolgee.t({ ...props, noWrap: true });\n    },\n  };\n}\n\n/**\n * Updates tolgee static data and language, to be ready right away for the first render\n * and therefore compatible with SSR.\n *\n * It also ensures that the first render is done without wrapping and so it avoids\n * \"client different than server\" issues.\n * *\n * @param tolgeeInstance initialized Tolgee instance\n * @param language language that is obtained outside of Tolgee on the server and client\n * @param staticData static data for the language\n * @param enabled if set to false, no action is taken\n */\nexport function useTolgeeSSR(\n  tolgeeInstance: TolgeeInstance,\n  language?: string,\n  data?: TolgeeStaticData | CachePublicRecord[] | undefined,\n  enabled = true\n) {\n  const [noWrappingTolgee] = useState(() =>\n    getTolgeeWithDeactivatedWrapper(tolgeeInstance)\n  );\n\n  const [initialRender, setInitialRender] = useState(enabled);\n\n  useEffect(() => {\n    setInitialRender(false);\n  }, []);\n\n  useMemo(() => {\n    if (enabled) {\n      // we have to prepare tolgee before rendering children\n      // so translations are available right away\n      // events emitting must be off, to not trigger re-render while rendering\n      tolgeeInstance.setEmitterActive(false);\n      tolgeeInstance.addStaticData(data);\n      tolgeeInstance.changeLanguage(language!);\n      tolgeeInstance.setEmitterActive(true);\n    }\n  }, [language, data, tolgeeInstance]);\n\n  useState(() => {\n    // running this function only on first render\n    if (!tolgeeInstance.isLoaded() && enabled) {\n      // warning user, that static data provided are not sufficient\n      // for proper SSR render\n      const requiredRecords = tolgeeInstance.getRequiredDescriptors(language);\n      const providedRecords = tolgeeInstance.getAllRecords();\n      const missingRecords = requiredRecords\n        .map(({ namespace, language }) =>\n          namespace ? `${namespace}:${language}` : language\n        )\n        .filter((key) => !providedRecords.find((r) => r?.cacheKey === key));\n\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Tolgee: Missing records in \"staticData\" for proper SSR functionality: ${missingRecords.map((key) => `\"${key}\"`).join(', ')}`\n      );\n    }\n  });\n\n  return initialRender ? noWrappingTolgee : tolgeeInstance;\n}\n","import React, { Suspense, useEffect, useState } from 'react';\nimport { TolgeeInstance, TolgeeStaticDataProp } from '@tolgee/web';\nimport { ReactOptions, TolgeeReactContext } from './types';\nimport { useTolgeeSSR } from './useTolgeeSSR';\n\nexport const DEFAULT_REACT_OPTIONS: ReactOptions = {\n  useSuspense: false,\n};\n\nlet ProviderInstance: React.Context<TolgeeReactContext | undefined>;\n\nexport const getProviderInstance = () => {\n  if (!ProviderInstance) {\n    ProviderInstance = React.createContext<TolgeeReactContext | undefined>(\n      undefined\n    );\n  }\n\n  return ProviderInstance;\n};\n\nlet LAST_TOLGEE_INSTANCE: TolgeeInstance | undefined = undefined;\n\nexport type SSROptions = {\n  /**\n   * Hard set language to this value, use together with `staticData`\n   */\n  language?: string;\n  /**\n   * If provided, static data will be hard set to Tolgee cache for initial render\n   */\n  staticData?: TolgeeStaticDataProp;\n};\n\nexport interface TolgeeProviderProps {\n  children?: React.ReactNode;\n  tolgee: TolgeeInstance;\n  options?: ReactOptions;\n  fallback?: React.ReactNode;\n  /**\n   * use this option if you use SSR\n   *\n   * You can pass staticData and language\n   * which will be set to tolgee instance for the initial render\n   *\n   * Don't switch between ssr and non-ssr dynamically\n   */\n  ssr?: SSROptions | boolean;\n}\n\nexport const TolgeeProvider: React.FC<TolgeeProviderProps> = ({\n  tolgee,\n  options,\n  children,\n  fallback,\n  ssr,\n}) => {\n  // prevent restarting tolgee unnecesarly\n  // however if the instance change on hot-reloading\n  // we want to restart\n  useEffect(() => {\n    if (LAST_TOLGEE_INSTANCE?.run !== tolgee.run) {\n      if (LAST_TOLGEE_INSTANCE) {\n        LAST_TOLGEE_INSTANCE.stop();\n      }\n      LAST_TOLGEE_INSTANCE = tolgee;\n      tolgee\n        .run()\n        .catch((e) => {\n          // eslint-disable-next-line no-console\n          console.error(e);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  }, [tolgee]);\n\n  let tolgeeSSR = tolgee;\n\n  const { language, staticData } = (\n    typeof ssr !== 'object' ? {} : ssr\n  ) as SSROptions;\n  tolgeeSSR = useTolgeeSSR(tolgee, language, staticData, Boolean(ssr));\n\n  const [loading, setLoading] = useState(!tolgeeSSR.isLoaded());\n\n  const optionsWithDefault = { ...DEFAULT_REACT_OPTIONS, ...options };\n\n  const TolgeeProviderContext = getProviderInstance();\n\n  if (optionsWithDefault.useSuspense) {\n    return (\n      <TolgeeProviderContext.Provider\n        value={{ tolgee: tolgeeSSR, options: optionsWithDefault }}\n      >\n        {loading ? (\n          fallback\n        ) : (\n          <Suspense fallback={fallback || null}>{children}</Suspense>\n        )}\n      </TolgeeProviderContext.Provider>\n    );\n  }\n\n  return (\n    <TolgeeProviderContext.Provider\n      value={{ tolgee: tolgeeSSR, options: optionsWithDefault }}\n    >\n      {loading ? fallback : children}\n    </TolgeeProviderContext.Provider>\n  );\n};\n","import type { TolgeePlugin } from '@tolgee/web';\nimport { DEFAULT_REACT_OPTIONS } from './TolgeeProvider';\nimport type { ReactOptions, TolgeeReactContext } from './types';\n\nlet globalContext: TolgeeReactContext | undefined;\n\nexport const GlobalContextPlugin =\n  (options?: Partial<ReactOptions>): TolgeePlugin =>\n  (tolgee) => {\n    globalContext = {\n      tolgee,\n      options: { ...DEFAULT_REACT_OPTIONS, ...options },\n    };\n    return tolgee;\n  };\n\nexport function getGlobalContext() {\n  return globalContext;\n}\n","import { useContext } from 'react';\nimport { getGlobalContext } from './GlobalContextPlugin';\nimport { getProviderInstance } from './TolgeeProvider';\n\nexport const useTolgeeContext = () => {\n  const TolgeeProviderContext = getProviderInstance();\n  const context = useContext(TolgeeProviderContext) || getGlobalContext();\n  if (!context) {\n    throw new Error(\n      \"Couldn't find tolgee instance, did you forgot to use `TolgeeProvider`?\"\n    );\n  }\n  return context;\n};\n","import { useCallback, useState } from 'react';\n\nexport const useRerender = () => {\n  const [instance, setCounter] = useState(0);\n\n  const rerender = useCallback(() => {\n    setCounter((num) => num + 1);\n  }, [setCounter]);\n  return { instance, rerender };\n};\n","import { useCallback, useEffect, useRef } from 'react';\nimport {\n  TranslateProps,\n  NsFallback,\n  getFallbackArray,\n  getFallback,\n} from '@tolgee/web';\n\nimport { useTolgeeContext } from './useTolgeeContext';\nimport { ReactOptions } from './types';\nimport { useRerender } from './hooks';\n\nexport const useTranslateInternal = (\n  ns?: NsFallback,\n  options?: ReactOptions\n) => {\n  const { tolgee, options: defaultOptions } = useTolgeeContext();\n  const namespaces = getFallback(ns);\n  const namespacesJoined = getFallbackArray(namespaces).join(':');\n\n  const currentOptions = {\n    ...defaultOptions,\n    ...options,\n  };\n\n  // dummy state to enable re-rendering\n  const { rerender, instance } = useRerender();\n\n  const subscriptionQueue = useRef([] as NsFallback[]);\n  subscriptionQueue.current = [];\n\n  const isLoaded = tolgee.isLoaded(namespaces);\n\n  useEffect(() => {\n    const subscription = tolgee.on('update', rerender);\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [namespacesJoined, tolgee]);\n\n  useEffect(() => {\n    tolgee.addActiveNs(namespaces);\n    return () => tolgee.removeActiveNs(namespaces);\n  }, [namespacesJoined, tolgee]);\n\n  const t = useCallback(\n    (props: TranslateProps<any>) => {\n      const fallbackNs = props.ns ?? namespaces?.[0];\n      return tolgee.t({ ...props, ns: fallbackNs }) as any;\n    },\n    [tolgee, instance]\n  );\n\n  if (currentOptions.useSuspense && !isLoaded) {\n    throw tolgee.addActiveNs(namespaces, true);\n  }\n\n  return { t, isLoading: !isLoaded };\n};\n","import { useCallback } from 'react';\nimport {\n  TFnType,\n  getTranslateProps,\n  DefaultParamType,\n  TranslationKey,\n} from '@tolgee/web';\n\nimport { useTranslateInternal } from './useTranslateInternal';\nimport { ReactOptions } from './types';\n\nexport interface UseTranslateResult {\n  t: TFnType<DefaultParamType, string, TranslationKey>;\n  isLoading: boolean;\n}\n\nexport const useTranslate = (\n  ns?: string[] | string,\n  options?: ReactOptions\n): UseTranslateResult => {\n  const { t: tInternal, isLoading } = useTranslateInternal(ns, options);\n\n  const t = useCallback(\n    (...params: any) => {\n      // @ts-ignore\n      const props = getTranslateProps(...params);\n      return tInternal(props);\n    },\n    [tInternal]\n  );\n\n  return { t, isLoading };\n};\n","import { TranslateParams } from '@tolgee/web';\nimport React from 'react';\n\nimport { ParamsTags } from './types';\n\nfunction unwrapSingleElementArray(value: any) {\n  if (Array.isArray(value) && value.length === 1) {\n    return value[0];\n  } else {\n    return value;\n  }\n}\n\nexport const wrapTagHandlers = (\n  params: TranslateParams<ParamsTags> | undefined\n) => {\n  if (!params) {\n    return undefined;\n  }\n\n  const result: any = {};\n\n  Object.entries(params || {}).forEach(([key, value]) => {\n    if (typeof value === 'function') {\n      result[key] = (chunk: any) => {\n        return value(addReactKeys(chunk));\n      };\n    } else if (React.isValidElement(value as any)) {\n      const el = value as React.ReactElement;\n      result[key] = (chunk: any) => {\n        return el.props.children === undefined && chunk?.length\n          ? React.cloneElement(el, {}, addReactKeys(chunk))\n          : React.cloneElement(el);\n      };\n    } else {\n      result[key] = value;\n    }\n  });\n\n  return result;\n};\n\nexport const addReactKeys = (\n  children: React.ReactNode | React.ReactNode[] | undefined\n) => {\n  const val = unwrapSingleElementArray(children);\n  if (Array.isArray(val)) {\n    return val.map((item, i) => (\n      <React.Fragment key={i}>{item}</React.Fragment>\n    ));\n  } else {\n    return val;\n  }\n};\n","import React from 'react';\nimport { addReactKeys, wrapTagHandlers } from './tagsTools';\nimport type { PropsWithKeyName, TBaseInterface } from './types';\n\nexport const TBase: TBaseInterface = (props) => {\n  const key = (props as PropsWithKeyName).keyName || props.children;\n  if (key === undefined) {\n    // eslint-disable-next-line no-console\n    console.error('T component: keyName not defined');\n  }\n  const defaultValue =\n    props.defaultValue ||\n    ((props as PropsWithKeyName).keyName ? props.children : undefined);\n\n  const translation = addReactKeys(\n    props.t({\n      key: key!,\n      params: wrapTagHandlers(props.params),\n      defaultValue,\n      noWrap: props.noWrap,\n      ns: props.ns,\n      language: props.language,\n    })\n  );\n\n  return <>{translation}</>;\n};\n","import React from 'react';\nimport { ParamsTags, TProps } from './types';\n\nimport { useTranslateInternal } from './useTranslateInternal';\nimport { TFnType } from '@tolgee/web';\nimport { TBase } from './TBase';\n\ninterface TInterface {\n  (props: TProps): JSX.Element;\n}\n\nexport const T: TInterface = (props) => {\n  const { t } = useTranslateInternal();\n\n  return <TBase t={t as TFnType<ParamsTags>} {...props} />;\n};\n","import { TolgeeEvent, TolgeeInstance } from '@tolgee/web';\nimport { useEffect } from 'react';\nimport { useRerender } from './hooks';\nimport { useTolgeeContext } from './useTolgeeContext';\n\nexport const useTolgee = (events?: TolgeeEvent[]): TolgeeInstance => {\n  const { tolgee } = useTolgeeContext();\n\n  const { rerender } = useRerender();\n\n  useEffect(() => {\n    const listeners = events?.map((e) => tolgee.on(e, rerender));\n    return () => {\n      listeners?.forEach((listener) => listener.unsubscribe());\n    };\n  }, [events?.join(':')]);\n\n  return tolgee;\n};\n"],"mappings":";;;AAQA,SAASA,+BAA+BA,CACtCC,MAAsB;EAEtB,OAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKF,MAAM;IACTG,CAACA,CAAC,GAAGC,IAAI;;MAEP,MAAMC,KAAK,GAAGC,iBAAiB,CAAC,GAAGF,IAAI,CAAC;MACxC,OAAOJ,MAAM,CAACG,CAAC,CAAMF,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAAG,KAAK;QAAEE,MAAM,EAAE;MAAI,GAAG;IAC7C;EAAC,CACD;AACJ;AAEA;;;;;;;;;;;AAWG;AACG,SAAUC,YAAYA,CAC1BC,cAA8B,EAC9BC,QAAiB,EACjBC,IAAyD,EACzDC,OAAO,GAAG,IAAI;EAEd,MAAM,CAACC,gBAAgB,CAAC,GAAGC,QAAQ,CAAC,MAClCf,+BAA+B,CAACU,cAAc,CAAC,CAChD;EAED,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGF,QAAQ,CAACF,OAAO,CAAC;EAE3DK,SAAS,CAAC,MAAK;IACbD,gBAAgB,CAAC,KAAK,CAAC;GACxB,EAAE,EAAE,CAAC;EAENE,OAAO,CAAC,MAAK;IACX,IAAIN,OAAO,EAAE;;;;MAIXH,cAAc,CAACU,gBAAgB,CAAC,KAAK,CAAC;MACtCV,cAAc,CAACW,aAAa,CAACT,IAAI,CAAC;MAClCF,cAAc,CAACY,cAAc,CAACX,QAAS,CAAC;MACxCD,cAAc,CAACU,gBAAgB,CAAC,IAAI,CAAC;IACtC;GACF,EAAE,CAACT,QAAQ,EAAEC,IAAI,EAAEF,cAAc,CAAC,CAAC;EAEpCK,QAAQ,CAAC,MAAK;;IAEZ,IAAI,CAACL,cAAc,CAACa,QAAQ,EAAE,IAAIV,OAAO,EAAE;;;MAGzC,MAAMW,eAAe,GAAGd,cAAc,CAACe,sBAAsB,CAACd,QAAQ,CAAC;MACvE,MAAMe,eAAe,GAAGhB,cAAc,CAACiB,aAAa,EAAE;MACtD,MAAMC,cAAc,GAAGJ,eAAe,CACnCK,GAAG,CAAC,CAAC;QAAEC,SAAS;QAAEnB;MAAQ,CAAE,KAC3BmB,SAAS,GAAG,GAAGA,SAAS,IAAInB,QAAQ,EAAE,GAAGA,QAAQ,CAClD,CACAoB,MAAM,CAAEC,GAAG,IAAK,CAACN,eAAe,CAACO,IAAI,CAAEC,CAAC,IAAK,CAAAA,CAAC,KAAD,QAAAA,CAAC,KAAD,kBAAAA,CAAC,CAAEC,QAAQ,MAAKH,GAAG,CAAC,CAAC;;MAGrEI,OAAO,CAACC,IAAI,CACV,yEAAyET,cAAc,CAACC,GAAG,CAAEG,GAAG,IAAK,IAAIA,GAAG,GAAG,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC,EAAE,CAC9H;IACF;EACH,CAAC,CAAC;EAEF,OAAOtB,aAAa,GAAGF,gBAAgB,GAAGJ,cAAc;AAC1D;AC7EO,MAAM6B,qBAAqB,GAAiB;EACjDC,WAAW,EAAE;CACd;AAED,IAAIC,gBAA+D;AAE5D,MAAMC,mBAAmB,GAAGA,CAAA,KAAK;EACtC,IAAI,CAACD,gBAAgB,EAAE;IACrBA,gBAAgB,GAAGE,KAAK,CAACC,aAAa,CACpCC,SAAS,CACV;EACF;EAED,OAAOJ,gBAAgB;AACzB;AAEA,IAAIK,oBAAoB,GAA+BD,SAAS;AA6BnD,MAAAE,cAAc,GAAkCA,CAAC;EAC5D9C,MAAM;EACN+C,OAAO;EACPC,QAAQ;EACRC,QAAQ;EACRC;AAAG,CACJ,KAAI;;;;EAIHjC,SAAS,CAAC,MAAK;IACb,IAAI,CAAA4B,oBAAoB,KAApB,QAAAA,oBAAoB,KAApB,kBAAAA,oBAAoB,CAAEM,GAAG,MAAKnD,MAAM,CAACmD,GAAG,EAAE;MAC5C,IAAIN,oBAAoB,EAAE;QACxBA,oBAAoB,CAACO,IAAI,EAAE;MAC5B;MACDP,oBAAoB,GAAG7C,MAAM;MAC7BA,MAAM,CACHmD,GAAG,EAAE,CACLE,KAAK,CAAEC,CAAC,IAAI;;QAEXnB,OAAO,CAACoB,KAAK,CAACD,CAAC,CAAC;MAClB,CAAC,CAAC,CACDE,OAAO,CAAC,MAAK;QACZC,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC;IACL;EACH,CAAC,EAAE,CAACzD,MAAM,CAAC,CAAC;EAEZ,IAAI0D,SAAS,GAAG1D,MAAM;EAEtB,MAAM;IAAEU,QAAQ;IAAEiD;EAAU,CAAE,GAC5B,OAAOT,GAAG,KAAK,QAAQ,GAAG,EAAE,GAAGA,GAClB;EACfQ,SAAS,GAAGlD,YAAY,CAACR,MAAM,EAAEU,QAAQ,EAAEiD,UAAU,EAAEC,OAAO,CAACV,GAAG,CAAC,CAAC;EAEpE,MAAM,CAACW,OAAO,EAAEJ,UAAU,CAAC,GAAG3C,QAAQ,CAAC,CAAC4C,SAAS,CAACpC,QAAQ,EAAE,CAAC;EAE7D,MAAMwC,kBAAkB,GAAQ7D,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAAoC,qBAAqB,CAAK,EAAAS,OAAO,CAAE;EAEnE,MAAMgB,qBAAqB,GAAGtB,mBAAmB,EAAE;EAEnD,IAAIqB,kBAAkB,CAACvB,WAAW,EAAE;IAClC,OACEG,KAAC,CAAAsB,aAAA,CAAAD,qBAAqB,CAACE,QAAQ;MAC7BC,KAAK,EAAE;QAAElE,MAAM,EAAE0D,SAAS;QAAEX,OAAO,EAAEe;MAAkB;IAAE,GAExDD,OAAO,GACNZ,QAAQ,GAERP,KAAA,CAAAsB,aAAA,CAACG,QAAQ,EAAC;MAAAlB,QAAQ,EAAEA,QAAQ,IAAI;IAAI,CAAG,EAAAD,QAAQ,CAChD,CAC8B;EAEpC;EAED,OACEN,KAAA,CAAAsB,aAAA,CAACD,qBAAqB,CAACE,QAAQ;IAC7BC,KAAK,EAAE;MAAElE,MAAM,EAAE0D,SAAS;MAAEX,OAAO,EAAEe;IAAkB;EAAE,GAExDD,OAAO,GAAGZ,QAAQ,GAAGD,QAAQ,CACC;AAErC;AC5GA,IAAIoB,aAA6C;AAE1C,MAAMC,mBAAmB,GAC7BtB,OAA+B,IAC/B/C,MAAM,IAAI;EACToE,aAAa,GAAG;IACdpE,MAAM;IACN+C,OAAO,EAAO9C,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAAoC,qBAAqB,CAAK,EAAAS,OAAO;GAChD;EACD,OAAO/C,MAAM;AACf;SAEcsE,gBAAgBA,CAAA;EAC9B,OAAOF,aAAa;AACtB;ACdO,MAAMG,gBAAgB,GAAGA,CAAA,KAAK;EACnC,MAAMR,qBAAqB,GAAGtB,mBAAmB,EAAE;EACnD,MAAM+B,OAAO,GAAGC,UAAU,CAACV,qBAAqB,CAAC,IAAIO,gBAAgB,EAAE;EACvE,IAAI,CAACE,OAAO,EAAE;IACZ,MAAM,IAAIE,KAAK,CACb,wEAAwE,CACzE;EACF;EACD,OAAOF,OAAO;AAChB,CAAC;ACXM,MAAMG,WAAW,GAAGA,CAAA,KAAK;EAC9B,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAG/D,QAAQ,CAAC,CAAC,CAAC;EAE1C,MAAMgE,QAAQ,GAAGC,WAAW,CAAC,MAAK;IAChCF,UAAU,CAAEG,GAAG,IAAKA,GAAG,GAAG,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACH,UAAU,CAAC,CAAC;EAChB,OAAO;IAAED,QAAQ;IAAEE;EAAQ,CAAE;AAC/B,CAAC;ACGM,MAAMG,oBAAoB,GAAGA,CAClCC,EAAe,EACfnC,OAAsB,KACpB;EACF,MAAM;IAAE/C,MAAM;IAAE+C,OAAO,EAAEoC;EAAc,CAAE,GAAGZ,gBAAgB,EAAE;EAC9D,MAAMa,UAAU,GAAGC,WAAW,CAACH,EAAE,CAAC;EAClC,MAAMI,gBAAgB,GAAGC,gBAAgB,CAACH,UAAU,CAAC,CAAC/C,IAAI,CAAC,GAAG,CAAC;EAE/D,MAAMmD,cAAc,GACfvF,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAAiF,cAAc,CACd,EAAApC,OAAO,CACX;;EAGD,MAAM;IAAE+B,QAAQ;IAAEF;EAAQ,CAAE,GAAGD,WAAW,EAAE;EAE5C,MAAMc,iBAAiB,GAAGC,MAAM,CAAC,EAAkB,CAAC;EACpDD,iBAAiB,CAACE,OAAO,GAAG,EAAE;EAE9B,MAAMrE,QAAQ,GAAGtB,MAAM,CAACsB,QAAQ,CAAC8D,UAAU,CAAC;EAE5CnE,SAAS,CAAC,MAAK;IACb,MAAM2E,YAAY,GAAG5F,MAAM,CAAC6F,EAAE,CAAC,QAAQ,EAAEf,QAAQ,CAAC;IAElD,OAAO,MAAK;MACVc,YAAY,CAACE,WAAW,EAAE;IAC5B,CAAC;EACH,CAAC,EAAE,CAACR,gBAAgB,EAAEtF,MAAM,CAAC,CAAC;EAE9BiB,SAAS,CAAC,MAAK;IACbjB,MAAM,CAAC+F,WAAW,CAACX,UAAU,CAAC;IAC9B,OAAO,MAAMpF,MAAM,CAACgG,cAAc,CAACZ,UAAU,CAAC;EAChD,CAAC,EAAE,CAACE,gBAAgB,EAAEtF,MAAM,CAAC,CAAC;EAE9B,MAAMG,CAAC,GAAG4E,WAAW,CAClB1E,KAA0B,IAAI;;IAC7B,MAAM4F,UAAU,GAAG,CAAAC,EAAA,GAAA7F,KAAK,CAAC6E,EAAE,cAAAgB,EAAA,cAAAA,EAAA,GAAId,UAAU,aAAVA,UAAU,KAAV,kBAAAA,UAAU,CAAG,CAAC,CAAC;IAC9C,OAAOpF,MAAM,CAACG,CAAC,CAAMF,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAAG,KAAK;MAAE6E,EAAE,EAAEe;IAAU,GAAU;EACtD,CAAC,EACD,CAACjG,MAAM,EAAE4E,QAAQ,CAAC,CACnB;EAED,IAAIY,cAAc,CAACjD,WAAW,IAAI,CAACjB,QAAQ,EAAE;IAC3C,MAAMtB,MAAM,CAAC+F,WAAW,CAACX,UAAU,EAAE,IAAI,CAAC;EAC3C;EAED,OAAO;IAAEjF,CAAC;IAAEgG,SAAS,EAAE,CAAC7E;EAAQ,CAAE;AACpC,CAAC;MC3CY8E,YAAY,GAAGA,CAC1BlB,EAAsB,EACtBnC,OAAsB,KACA;EACtB,MAAM;IAAE5C,CAAC,EAAEkG,SAAS;IAAEF;EAAS,CAAE,GAAGlB,oBAAoB,CAACC,EAAE,EAAEnC,OAAO,CAAC;EAErE,MAAM5C,CAAC,GAAG4E,WAAW,CACnB,CAAC,GAAGuB,MAAW,KAAI;;IAEjB,MAAMjG,KAAK,GAAGC,iBAAiB,CAAC,GAAGgG,MAAM,CAAC;IAC1C,OAAOD,SAAS,CAAChG,KAAK,CAAC;EACzB,CAAC,EACD,CAACgG,SAAS,CAAC,CACZ;EAED,OAAO;IAAElG,CAAC;IAAEgG;EAAS,CAAE;AACzB;AC3BA,SAASI,wBAAwBA,CAACrC,KAAU;EAC1C,IAAIsC,KAAK,CAACC,OAAO,CAACvC,KAAK,CAAC,IAAIA,KAAK,CAACwC,MAAM,KAAK,CAAC,EAAE;IAC9C,OAAOxC,KAAK,CAAC,CAAC,CAAC;EAChB,OAAM;IACL,OAAOA,KAAK;EACb;AACH;AAEO,MAAMyC,eAAe,GAC1BL,MAA+C,IAC7C;EACF,IAAI,CAACA,MAAM,EAAE;IACX,OAAO1D,SAAS;EACjB;EAED,MAAMgE,MAAM,GAAQ,EAAE;EAEtB3G,MAAM,CAAC4G,OAAO,CAACP,MAAM,IAAI,EAAE,CAAC,CAACQ,OAAO,CAAC,CAAC,CAAC/E,GAAG,EAAEmC,KAAK,CAAC,KAAI;IACpD,IAAI,OAAOA,KAAK,KAAK,UAAU,EAAE;MAC/B0C,MAAM,CAAC7E,GAAG,CAAC,GAAIgF,KAAU,IAAI;QAC3B,OAAO7C,KAAK,CAAC8C,YAAY,CAACD,KAAK,CAAC,CAAC;MACnC,CAAC;IACF,OAAM,IAAIrE,KAAK,CAACuE,cAAc,CAAC/C,KAAY,CAAC,EAAE;MAC7C,MAAMgD,EAAE,GAAGhD,KAA2B;MACtC0C,MAAM,CAAC7E,GAAG,CAAC,GAAIgF,KAAU,IAAI;QAC3B,OAAOG,EAAE,CAAC7G,KAAK,CAAC2C,QAAQ,KAAKJ,SAAS,KAAImE,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEL,MAAM,IACnDhE,KAAK,CAACyE,YAAY,CAACD,EAAE,EAAE,EAAE,EAAEF,YAAY,CAACD,KAAK,CAAC,CAAC,GAC/CrE,KAAK,CAACyE,YAAY,CAACD,EAAE,CAAC;MAC5B,CAAC;IACF,OAAM;MACLN,MAAM,CAAC7E,GAAG,CAAC,GAAGmC,KAAK;IACpB;EACH,CAAC,CAAC;EAEF,OAAO0C,MAAM;AACf,CAAC;AAEM,MAAMI,YAAY,GACvBhE,QAAyD,IACvD;EACF,MAAMoE,GAAG,GAAGb,wBAAwB,CAACvD,QAAQ,CAAC;EAC9C,IAAIwD,KAAK,CAACC,OAAO,CAACW,GAAG,CAAC,EAAE;IACtB,OAAOA,GAAG,CAACxF,GAAG,CAAC,CAACyF,IAAI,EAAEC,CAAC,KACrB5E,KAAA,CAAAsB,aAAA,CAACtB,KAAK,CAAC6E,QAAQ;MAACxF,GAAG,EAAEuF;IAAC,GAAGD,IAAI,CAC9B,CAAC;EACH,OAAM;IACL,OAAOD,GAAG;EACX;AACH,CAAC;ACjDY,MAAAI,KAAK,GAAoBnH,KAAK,IAAI;EAC7C,MAAM0B,GAAG,GAAI1B,KAA0B,CAACoH,OAAO,IAAIpH,KAAK,CAAC2C,QAAQ;EACjE,IAAIjB,GAAG,KAAKa,SAAS,EAAE;;IAErBT,OAAO,CAACoB,KAAK,CAAC,kCAAkC,CAAC;EAClD;EACD,MAAMmE,YAAY,GAChBrH,KAAK,CAACqH,YAAY,KAChBrH,KAA0B,CAACoH,OAAO,GAAGpH,KAAK,CAAC2C,QAAQ,GAAGJ,SAAS,CAAC;EAEpE,MAAM+E,WAAW,GAAGX,YAAY,CAC9B3G,KAAK,CAACF,CAAC,CAAC;IACN4B,GAAG,EAAEA,GAAI;IACTuE,MAAM,EAAEK,eAAe,CAACtG,KAAK,CAACiG,MAAM,CAAC;IACrCoB,YAAY;IACZnH,MAAM,EAAEF,KAAK,CAACE,MAAM;IACpB2E,EAAE,EAAE7E,KAAK,CAAC6E,EAAE;IACZxE,QAAQ,EAAEL,KAAK,CAACK;EACjB,EAAC,CACH;EAED,OAAOgC,KAAA,CAAAsB,aAAA,CAAAtB,KAAA,CAAA6E,QAAA,QAAGI,WAAW,CAAI;AAC3B;ACfa,MAAAC,CAAC,GAAgBvH,KAAK,IAAI;EACrC,MAAM;IAAEF;EAAC,CAAE,GAAG8E,oBAAoB,EAAE;EAEpC,OAAOvC,KAAA,CAAAsB,aAAA,CAACwD,KAAK,EAACvH,MAAA,CAAAC,MAAA;IAAAC,CAAC,EAAEA;EAAwB,GAAME,KAAK,EAAI;AAC1D;ACVa,MAAAwH,SAAS,GAAIC,MAAsB,IAAoB;EAClE,MAAM;IAAE9H;EAAM,CAAE,GAAGuE,gBAAgB,EAAE;EAErC,MAAM;IAAEO;EAAQ,CAAE,GAAGH,WAAW,EAAE;EAElC1D,SAAS,CAAC,MAAK;IACb,MAAM8G,SAAS,GAAGD,MAAM,KAAN,QAAAA,MAAM,uBAANA,MAAM,CAAElG,GAAG,CAAE0B,CAAC,IAAKtD,MAAM,CAAC6F,EAAE,CAACvC,CAAC,EAAEwB,QAAQ,CAAC,CAAC;IAC5D,OAAO,MAAK;MACViD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEjB,OAAO,CAAEkB,QAAQ,IAAKA,QAAQ,CAAClC,WAAW,EAAE,CAAC;IAC1D,CAAC;EACH,CAAC,EAAE,CAACgC,MAAM,aAANA,MAAM,KAAN,kBAAAA,MAAM,CAAEzF,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EAEvB,OAAOrC,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}